spring.application.name=project


# Configuración de la base de datos MySQL
spring.datasource.url=jdbc:mysql://localhost:3306/nombre_basedatos?useSSL=false&serverTimezone=UTC
spring.datasource.username=tu_usuario_mysql
spring.datasource.password=tu_contraseña_mysql
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# Configuración de JPA (para manejar la persistencia con MySQL)
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect

# Configuración de JWT (JSON Web Token)
jwt.secret=claveSecretaParaFirmarTokensJWT
jwt.expiration=3600000  # 1 hora (en milisegundos)
jwt.token.prefix=Bearer 
jwt.header=Authorization


# Configuración de OAuth2 (puedes agregar varios proveedores como Google, Facebook, etc.)
# spring.security.oauth2.client.registration.google.client-id=tu_google_client_id
# spring.security.oauth2.client.registration.google.client-secret=tu_google_client_secret
# spring.security.oauth2.client.registration.google.scope=profile, email
# spring.security.oauth2.client.registration.google.redirect-uri={baseUrl}/login/oauth2/code/google
# spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/auth
# spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
# spring.security.oauth2.client.provider.google.user-info-uri=https://openidconnect.googleapis.com/v1/userinfo

# Configuración de Spring Security (habilita y configura los endpoints de seguridad)
spring.security.oauth2.client.provider.google.jwk-set-uri=https://www.googleapis.com/oauth2/v3/certs
spring.security.oauth2.resourceserver.jwt.issuer-uri=https://accounts.google.com

# Configuración del servidor
server.port=8080

# URL base de tu aplicación para OAuth2
app.base-url=http://localhost:8080
